import os
from threading import Thread, Lock
import time


def word_counter(lines, word):
    """Counts the number of times a word appears in a list of lines.

    Args:
        lines (list): A list of lines.
        word (str): The word to count.

    Returns:
        int: The number of times the word appears in the list of lines.
    """

    count = 0
    word = word.lower()

    for line in lines:
        lower_line = line.casefold()
        count += lower_line.count(word)

    return count

def parallel_worker(lines, word, lock, total_count):
    """Counts the number of times a word appears in a list of lines and updates the total count.

    Args:
        lines (list): A list of lines.
        word (str): The word to count.
        lock (Lock): A threading lock to synchronize access to shared resources.
        total_count (list): A list containing a single element to hold the total count.
    """
    count = word_counter(lines, word)
    with lock:
        total_count[0] += count

def parallel_word_counter(path, word):
    """Divides the work equally and launches threads based on the number of cores.

    Args:
        word (str): The word to count.
        path (str): The path to the file.

    Returns:
        int: The number of times the word appears in the file.
    """ 
    num_threads = os.cpu_count()

    with open(path, 'r') as f:
        lines = f.readlines()
        num_lines = len(lines)

        chunk_size = num_lines // num_threads
        range_start = 0
        range_end = num_lines - 1

        lock = Lock()
        total_count = [0]  

        for i in range(num_threads):
            start = range_start + i * chunk_size
            end = start + chunk_size

            if i == num_threads - 1:
                end = range_end + 1

            Thread(target=parallel_worker, args=(lines[start:end], word, lock, total_count)).start()


        return total_count[0]


if __name__ == '__main__':
    
    path = input("Ingrese el nombre del archivo con su extension donde desea buscar: ")
    word = input("Introduzca la palabra que deseas buscar: ")
    
    start_time = time.time()
    with open(path, 'r') as f:
        lines = f.readlines()
    
    serial_times_word_appear = word_counter(lines, word)
    end_time = time.time()
    elapsed_time = end_time - start_time

    print(f"Numero de veces que aparece la palabra '{word}' en el archivo {path}: {serial_times_word_appear}")
    print(f"Tiempo de ejecución en serie: {elapsed_time} segundos.")

    start_time = time.time()
    parallel_times_word_appear = parallel_word_counter(path, word)
    end_time = time.time()
    elapsed_time = end_time - start_time

    print(f"Numero de veces que aparece la palabra '{word}' en el archivo {path}: {parallel_times_word_appear}")
    print(f"Tiempo de ejecución en paralelo: {elapsed_time} segundos.")

    print("\n--------------------------------------------------------\n")

    print("El enfoque utilizado para mejorar el rendimiento para buscar ocurrencias de una palabra en un archivo fue:")
    print("1. Dividir el trabajo en partes iguales (chunks) y lanzar hilos basados en el número de núcleos disponibles.")
    print("2. Crear una lista de una posicion llamada (total_count) donde se almacena la suma de todos los hilos. Se usa lista en vez de una variable porque estas permiten mutabilidad, ya que con las variables se crea una copia y se pierde la informacion almacenada anteriormente")
    print("3. Cada hilo que se lanza ejecuta la funcion word_counter() y cuenta la ocurrencia de la palabra indicada dentro del chunk que le corresponde.")
    print("4. Cada hilo suma el resultado obtenido de contar la ocurrencia de la palabra en la lista total_count")
    print("5. Para evitar el Race Condition se hace uso del lock al momento en que cada hilo va a realizar la suma de su conteo local con la suma total")